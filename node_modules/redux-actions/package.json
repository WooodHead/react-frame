{
  "_args": [
    [
      {
        "raw": "redux-actions@^2.0.3",
        "scope": null,
        "escapedName": "redux-actions",
        "name": "redux-actions",
        "rawSpec": "^2.0.3",
        "spec": ">=2.0.3 <3.0.0",
        "type": "range"
      },
      "/Users/gaoyanru/Documents/demo/react-frame"
    ]
  ],
  "_from": "redux-actions@>=2.0.3 <3.0.0",
  "_id": "redux-actions@2.1.0",
  "_inCache": true,
  "_location": "/redux-actions",
  "_nodeVersion": "7.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/redux-actions-2.1.0.tgz_1498929704909_0.315173331880942"
  },
  "_npmUser": {
    "name": "yangmillstheory",
    "email": "v.alvarez312@gmail.com"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "redux-actions@^2.0.3",
    "scope": null,
    "escapedName": "redux-actions",
    "name": "redux-actions",
    "rawSpec": "^2.0.3",
    "spec": ">=2.0.3 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/redux-actions/-/redux-actions-2.1.0.tgz",
  "_shasum": "13a479ad40f5fcee599d5f6edfd538fc6a476085",
  "_shrinkwrap": null,
  "_spec": "redux-actions@^2.0.3",
  "_where": "/Users/gaoyanru/Documents/demo/react-frame",
  "author": {
    "name": "Andrew Clark",
    "email": "acdlite@me.com"
  },
  "bugs": {
    "url": "https://github.com/acdlite/redux-actions/issues"
  },
  "dependencies": {
    "invariant": "^2.2.1",
    "lodash": "^4.13.1",
    "lodash-es": "^4.17.4",
    "reduce-reducers": "^0.1.0"
  },
  "description": "Flux Standard Action utlities for Redux",
  "devDependencies": {
    "babel-cli": "^6.7.7",
    "babel-core": "^6.7.7",
    "babel-eslint": "^6.1.1",
    "babel-loader": "^6.2.4",
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-stage-0": "^6.5.0",
    "babel-register": "^6.7.2",
    "chai": "^3.0.0",
    "cross-env": "^2.0.0",
    "eslint": "^2.8.0",
    "eslint-config-airbnb-base": "^1.0.3",
    "eslint-plugin-import": "^1.5.0",
    "eslint-watch": "^2.1.13",
    "flux-standard-action": "^1.0.0",
    "mocha": "^2.2.5",
    "rimraf": "^2.5.3",
    "webpack": "^1.13.1"
  },
  "directories": {},
  "dist": {
    "shasum": "13a479ad40f5fcee599d5f6edfd538fc6a476085",
    "tarball": "https://registry.npmjs.org/redux-actions/-/redux-actions-2.1.0.tgz"
  },
  "files": [
    "es",
    "lib",
    "dist"
  ],
  "gitHead": "a0a9f00246c7e760bd1dfc6a630652c1520bb2b3",
  "homepage": "https://github.com/acdlite/redux-actions",
  "jsnext:main": "es/index.js",
  "keywords": [
    "flux",
    "redux",
    "fsa",
    "actions"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "yangmillstheory",
      "email": "v.alvarez312@gmail.com"
    },
    {
      "name": "timche",
      "email": "tim@cheung.io"
    },
    {
      "name": "acdlite",
      "email": "acdlite@me.com"
    }
  ],
  "module": "es/index.js",
  "name": "redux-actions",
  "optionalDependencies": {},
  "readme": "# redux-actions\n\n[![build status](https://img.shields.io/travis/acdlite/redux-actions/master.svg?style=flat-square)](https://travis-ci.org/acdlite/redux-actions)\n\n[![NPM](https://nodei.co/npm/redux-actions.png?downloads=true)](https://nodei.co/npm/redux-actions/)\n\n[Flux Standard Action](https://github.com/acdlite/flux-standard-action) utilities for Redux.\n\n## Installation\n\n```bash\nnpm install --save redux-actions\n```\n\nThe [npm](https://www.npmjs.com) package provides a [CommonJS](http://webpack.github.io/docs/commonjs.html) build for use in Node.js, and with bundlers like [Webpack](http://webpack.github.io/) and [Browserify](http://browserify.org/). It also includes an [ES modules](http://jsmodules.io/) build that works well with [Rollup](http://rollupjs.org/) and [Webpack2](https://webpack.js.org)'s tree-shaking.\n\nIf you don’t use [npm](https://www.npmjs.com), you may grab the latest [UMD](https://unpkg.com/redux-actions@latest/dist) build from [unpkg](https://unpkg.com) (either a [development](https://unpkg.com/redux-actions@latest/dist/redux-actions.js) or a [production](https://unpkg.com/redux-actions@latest/dist/redux-actions.min.js) build). The UMD build exports a global called `window.ReduxActions` if you add it to your page via a `<script>` tag. We *don’t* recommend UMD builds for any serious application, as most of the libraries complementary to Redux are only available on [npm](https://www.npmjs.com/search?q=redux).\n\n## Usage\n\n### `createAction(type, payloadCreator = Identity, ?metaCreator)`\n\n```js\nimport { createAction } from 'redux-actions';\n```\n\nWraps an action creator so that its return value is the payload of a Flux Standard Action.\n\n`payloadCreator` must be a function, `undefined`, or `null`. If `payloadCreator` is `undefined` or `null`, the identity function is used.\n\nExample:\n\n```js\nlet noop = createAction('NOOP', amount => amount);\n// same as\nnoop = createAction('NOOP');\n\nexpect(noop(42)).to.deep.equal({\n  type: 'NOOP',\n  payload: 42\n});\n```\n\nIf the payload is an instance of an [Error\nobject](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Error),\nredux-actions will automatically set ```action.error``` to true.\n\nExample:\n\n```js\nconst noop = createAction('NOOP');\n\nconst error = new TypeError('not a number');\nexpect(noop(error)).to.deep.equal({\n  type: 'NOOP',\n  payload: error,\n  error: true\n});\n```\n\n`createAction` also returns its `type` when used as type in `handleAction` or `handleActions`.\n\nExample:\n\n```js\nconst noop = createAction('INCREMENT');\n\n// As parameter in handleAction:\nhandleAction(noop, {\n  next(state, action) {...},\n  throw(state, action) {...}\n});\n\n// As object key in handleActions:\nconst reducer = handleActions({\n  [noop]: (state, action) => ({\n    counter: state.counter + action.payload\n  })\n}, { counter: 0 });\n```\n\n**NOTE:** The more correct name for this function is probably `createActionCreator()`, but that seems a bit redundant.\n\nUse the identity form to create one-off actions:\n\n```js\ncreateAction('ADD_TODO')('Use Redux');\n```\n\n`metaCreator` is an optional function that creates metadata for the payload. It receives the same arguments as the payload creator, but its result becomes the meta field of the resulting action. If `metaCreator` is undefined or not a function, the meta field is omitted.\n\n### `createActions(?actionMap, ?...identityActions)`\n\n```js\nimport { createActions } from 'redux-actions';\n```\n\nReturns an object mapping action types to action creators. The keys of this object are camel-cased from the keys in `actionMap` and the string literals of `identityActions`; the values are the action creators.\n\n`actionMap` is an optional object and a recursive data structure, with action types as keys, and whose values **must** be either\n\n- a function, which is the payload creator for that action\n- an array with `payload` and `meta` functions in that order, as in [`createAction`](#createactiontype-payloadcreator--identity-metacreator)\n    - `meta` is **required** in this case (otherwise use the function form above)\n- an `actionMap`\n\n`identityActions` is an optional list of positional string arguments that are action type strings; these action types will use the identity payload creator.\n\n\n```js\nconst { actionOne, actionTwo, actionThree } = createActions({\n  // function form; payload creator defined inline\n  ACTION_ONE: (key, value) => ({ [key]: value }),\n\n  // array form\n  ACTION_TWO: [\n    (first) => [first],             // payload\n    (first, second) => ({ second }) // meta\n  ],\n\n  // trailing action type string form; payload creator is the identity\n}, 'ACTION_THREE');\n\nexpect(actionOne('key', 1)).to.deep.equal({\n  type: 'ACTION_ONE',\n  payload: { key: 1 }\n});\n\nexpect(actionTwo('first', 'second')).to.deep.equal({\n  type: 'ACTION_TWO',\n  payload: ['first'],\n  meta: { second: 'second' }\n});\n\nexpect(actionThree(3)).to.deep.equal({\n  type: 'ACTION_THREE',\n  payload: 3,\n});\n```\n\nIf `actionMap` has a recursive structure, its leaves are used as payload and meta creators, and the action type for each leaf is the combined path to that leaf:\n\n```js\nconst actionCreators = createActions({\n  APP: {\n    COUNTER: {\n      INCREMENT: [\n        amount => ({ amount }),\n        amount => ({ key: 'value', amount })\n      ],\n      DECREMENT: amount => ({ amount: -amount }),\n      SET: undefined // given undefined, the identity function will be used\n    },\n    NOTIFY: [\n      (username, message) => ({ message: `${username}: ${message}` }),\n      (username, message) => ({ username, message })\n    ]\n  }\n});\n\nexpect(actionCreators.app.counter.increment(1)).to.deep.equal({\n  type: 'APP/COUNTER/INCREMENT',\n  payload: { amount: 1 },\n  meta: { key: 'value', amount: 1 }\n});\nexpect(actionCreators.app.counter.decrement(1)).to.deep.equal({\n  type: 'APP/COUNTER/DECREMENT',\n  payload: { amount: -1 }\n});\nexpect(actionCreators.app.counter.set(100)).to.deep.equal({\n  type: 'APP/COUNTER/SET',\n  payload: 100\n});\nexpect(actionCreators.app.notify('yangmillstheory', 'Hello World')).to.deep.equal({\n  type: 'APP/NOTIFY',\n  payload: { message: 'yangmillstheory: Hello World' },\n  meta: { username: 'yangmillstheory', message: 'Hello World' }\n});\n```\nWhen using this form, you can pass an object with key `namespace` as the last positional argument, instead of the default `/`.\n\n### `handleAction(type, reducer | reducerMap = Identity, defaultState)`\n\n```js\nimport { handleAction } from 'redux-actions';\n```\n\nWraps a reducer so that it only handles Flux Standard Actions of a certain type.\n\nIf a `reducer` function is passed, it is used to handle both normal actions and failed actions. (A failed action is analogous to a rejected promise.) You can use this form if you know a certain type of action will never fail, like the increment example above.\n\nOtherwise, you can specify separate reducers for `next()` and `throw()` using the `reducerMap` form. This API is inspired by the ES6 generator interface.\n\n```js\nhandleAction('FETCH_DATA', {\n  next(state, action) {...},\n  throw(state, action) {...}\n}, defaultState);\n```\n\nIf either `next()` or `throw()` are `undefined` or `null`, then the identity function is used for that reducer.\n\nIf the reducer argument (`reducer | reducerMap`) is `undefined`, then the identity function is used.\n\nThe third parameter `defaultState` is required, and is used when `undefined` is passed to the reducer.\n\n### `handleActions(reducerMap, defaultState)`\n\n```js\nimport { handleActions } from 'redux-actions';\n```\n\nCreates multiple reducers using `handleAction()` and combines them into a single reducer that handles multiple actions. Accepts a map where the keys are passed as the first parameter to `handleAction()` (the action type), and the values are passed as the second parameter (either a reducer or reducer map). The map must not be empty.\n\nThe second parameter `defaultState` is required, and is used when `undefined` is passed to the reducer.\n\n(Internally, `handleActions()` works by applying multiple reducers in sequence using [reduce-reducers](https://github.com/acdlite/reduce-reducers).)\n\nExample:\n\n```js\nconst reducer = handleActions({\n  INCREMENT: (state, action) => ({\n    counter: state.counter + action.payload\n  }),\n\n  DECREMENT: (state, action) => ({\n    counter: state.counter - action.payload\n  })\n}, { counter: 0 });\n```\n\n### `combineActions(...types)`\n\nCombine any number of action types or action creators. `types` is a list of positional arguments which can be action type strings, symbols, or action creators.\n\nThis allows you to reduce multiple distinct actions with the same reducer.\n\n```js\nconst { increment, decrement } = createActions({\n  INCREMENT: amount => ({ amount }),\n  DECREMENT: amount => ({ amount: -amount }),\n})\n\nconst reducer = handleAction(combineActions(increment, decrement), {\n  next: (state, { payload: { amount } }) => ({ ...state, counter: state.counter + amount }),\n  throw: state => ({ ...state, counter: 0 }),\n}, { counter: 10 })\n\nexpect(reducer(undefined, increment(1)).to.deep.equal({ counter: 11 })\nexpect(reducer(undefined, decrement(1)).to.deep.equal({ counter: 9 })\nexpect(reducer(undefined, increment(new Error)).to.deep.equal({ counter: 0 })\nexpect(reducer(undefined, decrement(new Error)).to.deep.equal({ counter: 0 })\n```\n\nHere's an example using `handleActions`:\n\n```js\nconst { increment, decrement } = createActions({\n  INCREMENT: amount => ({ amount }),\n  DECREMENT: amount => ({ amount: -amount })\n});\n\nconst reducer = handleActions({\n  [combineActions(increment, decrement)](state, { payload: { amount } }) {\n    return { ...state, counter: state.counter + amount };\n  }\n}, { counter: 10 });\n\nexpect(reducer({ counter: 5 }, increment(5))).to.deep.equal({ counter: 10 });\nexpect(reducer({ counter: 5 }, decrement(5))).to.deep.equal({ counter: 0 });\nexpect(reducer({ counter: 5 }, { type: 'NOT_TYPE', payload: 1000 })).to.equal({ counter: 5 });\nexpect(reducer(undefined, increment(5))).to.deep.equal({ counter: 15 });\n```\n\n## Usage with middleware\n\nredux-actions is handy all by itself, however, its real power comes when you combine it with middleware.\n\nThe identity form of `createAction` is a great way to create a single action creator that handles multiple payload types. For example, using [redux-promise](https://github.com/acdlite/redux-promise) and [redux-rx](https://github.com/acdlite/redux-rx):\n\n```js\nconst addTodo = createAction('ADD_TODO');\n\n// A single reducer...\nhandleAction('ADD_TODO', (state = { todos: [] }, action) => ({\n  ...state,\n  todos: [...state.todos, action.payload]\n}));\n\n// ...that works with all of these forms:\n// (Don't forget to use `bindActionCreators()` or equivalent.\n// I've left that bit out)\naddTodo('Use Redux')\naddTodo(Promise.resolve('Weep with joy'));\naddTodo(Observable.of(\n  'Learn about middleware',\n  'Learn about higher-order stores'\n)).subscribe();\n```\n\n## See also\n\nUse redux-actions in combination with FSA-compliant libraries.\n\n- [redux-promise](https://github.com/acdlite/redux-promise) - Promise middleware\n- [redux-rx](https://github.com/acdlite/redux-rx) - Includes observable middleware.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/acdlite/redux-actions.git"
  },
  "scripts": {
    "build": "npm run clean && npm run build:es && npm run build:commonjs && npm run build:umd && npm run build:umd:min",
    "build:commonjs": "babel src --out-dir lib --ignore *-test.js",
    "build:es": "cross-env BABEL_ENV=es babel src --out-dir es --ignore *-test.js",
    "build:umd": "cross-env NODE_ENV=development webpack",
    "build:umd:min": "cross-env NODE_ENV=production webpack",
    "clean": "rimraf lib es",
    "lint": "esw build src webpack.config --color",
    "lint:fix": "npm run lint -- --fix",
    "lint:watch": "npm run lint -- --watch",
    "prepublish": "npm run lint && npm run test && npm run build",
    "test": "mocha --compilers js:babel-register src/**/*-test.js",
    "test:watch": "npm run test -- --watch src/**/*-test.js"
  },
  "version": "2.1.0"
}
