{
  "_args": [
    [
      {
        "raw": "react-native-menu@~0.21.0",
        "scope": null,
        "escapedName": "react-native-menu",
        "name": "react-native-menu",
        "rawSpec": "~0.21.0",
        "spec": ">=0.21.0 <0.22.0",
        "type": "range"
      },
      "/Users/gaoyanru/Documents/demo/react-frame/node_modules/antd-mobile"
    ]
  ],
  "_from": "react-native-menu@>=0.21.0 <0.22.0",
  "_id": "react-native-menu@0.21.0",
  "_inCache": true,
  "_location": "/react-native-menu",
  "_nodeVersion": "6.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-menu-0.21.0.tgz_1495595507828_0.658509835600853"
  },
  "_npmUser": {
    "name": "jaysoo",
    "email": "jack.hsu@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-menu@~0.21.0",
    "scope": null,
    "escapedName": "react-native-menu",
    "name": "react-native-menu",
    "rawSpec": "~0.21.0",
    "spec": ">=0.21.0 <0.22.0",
    "type": "range"
  },
  "_requiredBy": [
    "/antd-mobile"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-menu/-/react-native-menu-0.21.0.tgz",
  "_shasum": "ebc647862eb80ed00e2289397bf8b634b09b1e8b",
  "_shrinkwrap": null,
  "_spec": "react-native-menu@~0.21.0",
  "_where": "/Users/gaoyanru/Documents/demo/react-frame/node_modules/antd-mobile",
  "author": {
    "name": "Jack Hsu",
    "email": "jack.hsu@gmail.com",
    "url": "http://jaysoo.ca/"
  },
  "bugs": {
    "url": "https://github.com/jaysoo/react-native-menu/issues"
  },
  "dependencies": {
    "react-timer-mixin": "^0.13.3"
  },
  "description": "A flexible dropdown menu component for Android and iOS that is similar to Android's Spinner.",
  "devDependencies": {
    "appium": "^1.4.16",
    "babel-core": "^6.4.0",
    "babel-preset-es2015": "^6.3.13",
    "babel-preset-react": "^6.3.13",
    "babel-preset-react-native": "^1.9.0",
    "babel-preset-stage-2": "^6.3.13",
    "chai": "^3.4.1",
    "chai-as-promised": "^5.2.0",
    "colors": "^1.1.2",
    "concurrently": "^2.0.0",
    "mocha": "^2.3.4",
    "react": "^15.4.2",
    "react-addons-test-utils": "^15.4.2",
    "sinon": "^1.17.2",
    "wd": "^0.4.0"
  },
  "directories": {},
  "dist": {
    "shasum": "ebc647862eb80ed00e2289397bf8b634b09b1e8b",
    "tarball": "https://registry.npmjs.org/react-native-menu/-/react-native-menu-0.21.0.tgz"
  },
  "files": [
    "android.demo.gif",
    "ios.demo.gif",
    "README.md",
    "LICENSE",
    "src"
  ],
  "gitHead": "3510b0b4e59299ec0bf9b0a29615bc119cf650ca",
  "homepage": "https://github.com/jaysoo/react-native-menu#readme",
  "keywords": [
    "react-native",
    "react",
    "menu",
    "spinner",
    "dropdown",
    "react-component",
    "ios",
    "android"
  ],
  "license": "ISC",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "jaysoo",
      "email": "jack.hsu@gmail.com"
    }
  ],
  "name": "react-native-menu",
  "optionalDependencies": {},
  "readme": "[![](https://img.shields.io/npm/dm/react-native-menu.svg?style=flat-square)](https://www.npmjs.com/package/react-native-menu)\n\n# react-native-menu\n\nA menu component for Android and iOS that provides a dropdown similar to Android's\n[Spinner](http://developer.android.com/reference/android/widget/Spinner.html), but does not\nretain a persistent selection.\n\nThe API is very flexible so you are free to extend the styling and behaviour.\n\n## Installation\n\n```\n$ npm install react-native-menu --save\n```\n\n## Demo\n\n| iOS | Android |\n| --- | ------- |\n| ![](./ios.demo.gif) | ![](./android.demo.gif) |\n\n## Basic Usage\n\n```js\nimport React, { View, Text, AppRegistry } from 'react-native';\nimport Menu, { MenuContext, MenuOptions, MenuOption, MenuTrigger } from 'react-native-menu';\n\nconst App = () => (\n  // You need to place a MenuContext somewhere in your application, usually at the root.\n  // Menus will open within the context, and only one menu can open at a time per context.\n  <MenuContext style={{ flex: 1 }}>\n    <TopNavigation/>\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}><Text>Hello!</Text></View>\n  </MenuContext>\n);\n\nconst TopNavigation = () => (\n  <View style={{ padding: 10, flexDirection: 'row', backgroundColor: 'pink' }}>\n    <View style={{ flex: 1 }}><Text>My App</Text></View>\n    <Menu onSelect={(value) => alert(`User selected the number ${value}`)}>\n      <MenuTrigger>\n        <Text style={{ fontSize: 20 }}>&#8942;</Text>\n      </MenuTrigger>\n      <MenuOptions>\n        <MenuOption value={1}>\n          <Text>One</Text>\n        </MenuOption>\n        <MenuOption value={2}>\n          <Text>Two</Text>\n        </MenuOption>\n      </MenuOptions>\n    </Menu>\n  </View>\n);\n\nAppRegistry.registerComponent('Example', () => App);\n```\n\n**Important:** In order for the `<Menu/>` to work, you need to mount `<MenuContext/>` as an ancestor to `<Menu/>`. This allows\nthe menu to open on top of all other components mounted under `<MenuContext/>` -- basically, the menu will be moved\nto be the last child of the context.\n\nYou must also have a `<MenuTrigger/>` and a `<MenuOptions/>` as direct children under `<Menu/>`. The `MenuTrigger` component\nopens the menu when pressed. The `MenuOptions` component can take *any* children, but you need at least one `MenuOption`\nchild in order for the menu to actually do anything.\n\nThe `MenuOption` component can take *any* children.\n\nPlease refer to the full working example [here](./Example/Example.js).\n\n### Adding feedback to `MenuTrigger` and `MenuOption` components\nBy default, the `MenuTrigger` and `MenuOption` components render with a\n`TouchableWithoutFeedback` component, however this may make the menu feel\nunnatural in your app.\n\nTo override this, both components will take a `renderTouchable` property, which\nshould be a function which returns an alternate component to use. For example:\n\n```js\nimport { TouchableOpacity, Text } from 'react-native';\nimport Menu, { MenuOptions, MenuOption, MenuTrigger } from 'react-native-menu';\n\nconst renderTouchable = () => <TouchableOpacity/>;\n\nconst menu = () => (\n  <Menu>\n    <MenuTrigger renderTouchable={renderTouchable}>\n      <Text>Trigger</Text>\n    </MenuTrigger>\n    <MenuOptions>\n      <MenuOption value={1} renderTouchable={renderTouchable}>\n        <Text>One</Text>\n      </MenuOption>\n      <MenuOption value={2} renderTouchable={renderTouchable}>\n        <Text>Two</Text>\n      </MenuOption>\n    </MenuOptions>\n  </Menu>\n);\n```\n\n## API\n\n### MenuContext\n\nMethods:\n\n- isMenuOpen() -- Returns `true` if menu is open\n- openMenu() -- Opens the menu\n- closeMenu() -- Closes the menu\n- toggleMenu() -- Toggle the menu between open and close\n\nProps:\n\n\n- 'detectBackAndroid' -- If true, menu context detects an Android hardware back press, closes menu and stops it from propagating and potentially causing bugs. (Default: true)\n- `style` -- Overrides default style properties (user-defined style will take priority)\n- `onCloseMenu` -- Handler that will be called with the state of `MenuContext`, if defined.\n\n### Menu\n\nMethods:\n\n- getName() -- Returns the menu name (e.g. useful to get auto generated name)\n\nProps:\n\n- `onSelect` -- This function is called with the value the `MenuOption` that has been selected by the user\n\n### MenuTrigger\n\nProps:\n\n- `disabled` -- If true, then this trigger is not pressable\n- `style` -- Overrides default style properties (user-defined style will take priority)\n- `renderTouchable` -- A function which can override the default\n  `TouchableWithoutFeedback` component by returning a different component. [See\n  an example here](#adding-feedback-to-menutrigger-and-menuoption-components).\n\n### MenuOptions\n\nProps:\n\n- `optionsContainerStyle` -- Provides custom styling for options container\n- `renderOptionsContainer` -- A function that renders takes in the `MenuOptions` element and renders a container element\n  that contains the options. Default function wraps options with a `ScrollView`.\n\nFor example, if you want to change the options width to `300`, you can use `<MenuOptions optionsContainerStyle={{ width: 300 }}>`.\nTo further customize the rendered content you can do something like\n`<MenuOptions renderOptionsContainer={(options) => <SomeCustomContainer>{options}</SomeCustomContainer>}>`.\n\n### MenuOption\n\nProps:\n\n- `disabled` -- If true, then this option is not selectable\n- `style` -- Overrides default style properties (user-defined style will take priority)\n- `renderTouchable` -- A function which can override the default\n  `TouchableWithoutFeedback` component by returning a different component. [See\n  an example here](#adding-feedback-to-menutrigger-and-menuoption-components).\n\n## Latest Changes\n\n### 0.20.1\n\n- Changed menu elevation as per [material design spec](https://material.google.com/what-is-material/elevation-shadows.html) (thanks [@heydabop](https://github.com/heydabop)!)\n\n### 0.20.0\n\n- Fixes compatibility with React Native 0.27.2 (thanks [@Froelund](https://github.com/Froelund))\n\n### 0.19.0\n\n- Fixes a performance issue where registering menu options on already\n  rendered and opened menu causes infinite render loop (Closes #5, #9).\n\n### 0.18.15\n\n- Fixes issue where multiple unnamed `Menu` components under one `MenuContext\n  causes bad positioning.\n\n### 0.18.14\n\n- Lazily calculate menu position on open -- fixes stale calculation issues.\n\n## Roadmap\n\n### Features\n\n- Allow positioning of menu to be customized (currently only anchors to top-right of `Menu`).\n- Detect if the menu will be rendered off-screen, and adjust positioning accordingly.\n\n## Testing\n\nInstall dev modules:\n\n```\nnpm install\n```\n\n### Run unit tests\n\n```\nnpm run test:unit\n```\n\n### Run integration tests\n\nMake sure you have a connected android device. You find list devices using `adb devices`.\n\n```\nnpm run test:integration\n```\n\n## Contributing\n\nContributions are welcome! Just open an issues with any ideas or pull-requests.\nI will take a look when I have time. :)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jaysoo/react-native-menu.git"
  },
  "scripts": {
    "build:android": "cd Example/android && ./gradlew assembleRelease",
    "install:example": "cd Example && npm install",
    "start:appium": "appium",
    "test": "npm run test:setup && npm run test:unit && npm run test:integration",
    "test:feature": "concurrently 'npm run start:appium' 'npm run test:feature:suite'",
    "test:feature:suite": "mocha --require babel-core/register test/integration",
    "test:setup": "npm run install:example && npm run build:android",
    "test:unit": "mocha --require babel-core/register test/unit"
  },
  "version": "0.21.0"
}
