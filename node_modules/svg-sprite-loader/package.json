{
  "_args": [
    [
      {
        "raw": "svg-sprite-loader@^0.3.1",
        "scope": null,
        "escapedName": "svg-sprite-loader",
        "name": "svg-sprite-loader",
        "rawSpec": "^0.3.1",
        "spec": ">=0.3.1 <0.4.0",
        "type": "range"
      },
      "/Users/gaoyanru/Documents/demo/react-frame"
    ]
  ],
  "_from": "svg-sprite-loader@>=0.3.1 <0.4.0",
  "_id": "svg-sprite-loader@0.3.1",
  "_inCache": true,
  "_location": "/svg-sprite-loader",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/svg-sprite-loader-0.3.1.tgz_1493129979826_0.3986939701717347"
  },
  "_npmUser": {
    "name": "princed",
    "email": "eugene@datsky.ru"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {
    "big.js": "3.1.3",
    "emojis-list": "2.1.0",
    "escape-string-regexp": "1.0.5",
    "has-ansi": "2.0.0",
    "js-base64": "2.1.9",
    "json5": "0.5.1",
    "object-assign": "4.1.1",
    "source-map": "0.5.6",
    "strip-ansi": "3.0.1"
  },
  "_requested": {
    "raw": "svg-sprite-loader@^0.3.1",
    "scope": null,
    "escapedName": "svg-sprite-loader",
    "name": "svg-sprite-loader",
    "rawSpec": "^0.3.1",
    "spec": ">=0.3.1 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/svg-sprite-loader/-/svg-sprite-loader-0.3.1.tgz",
  "_shasum": "44b22c7724bc77256c306b1796257ae6efee515a",
  "_shrinkwrap": null,
  "_spec": "svg-sprite-loader@^0.3.1",
  "_where": "/Users/gaoyanru/Documents/demo/react-frame",
  "author": {
    "name": "kisenka"
  },
  "bugs": {
    "url": "https://github.com/kisenka/webpack-svg-sprite-loader/issues"
  },
  "dependencies": {
    "cheerio": "^0.22.0",
    "extend": "^3.0.0",
    "image-size": "^0.3.5",
    "loader-utils": "^0.2.11",
    "postcss": "^5.2.10",
    "sniffr": "1.1.4"
  },
  "description": "SVG sprite webpack loader",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "44b22c7724bc77256c306b1796257ae6efee515a",
    "tarball": "https://registry.npmjs.org/svg-sprite-loader/-/svg-sprite-loader-0.3.1.tgz"
  },
  "files": [
    "lib/",
    "index.js",
    "config.js",
    "README.md",
    "LICENSE"
  ],
  "gitHead": "e0cfbbb380232b03d450bc634bde0583ea07bcf9",
  "homepage": "https://github.com/kisenka/webpack-svg-sprite-loader#readme",
  "keywords": [
    "webpack",
    "sprite",
    "svg"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "kisenka",
      "email": "qtuzov@gmail.com"
    },
    {
      "name": "princed",
      "email": "eugene@datsky.ru"
    }
  ],
  "name": "svg-sprite-loader",
  "optionalDependencies": {},
  "readme": "# SVG Sprite Webpack Loader\n\nIt's like [style-loader](https://github.com/webpack/style-loader), but for SVGs. Features:\n\n- Create a single SVG sprite from a set of images\n- Raster image support (PNG, JPG and GIF)\n- Custom sprite implementations\n\n## How it works\nWhen you require an image, SVG sprite webpack loader will transform it into an SVG symbol and add it to the array using a special [sprite](lib/web/sprite.js) class.\nWhen the browser event `DOMContentLoaded` fires, an image sprite will then be rendered and injected as the first child of `document.body`.\n\nBy default, require statements like `require('svg-sprite!./image.svg')` will return a symbol ID, so you can reference it later\nwith SVG's `<use>` tag:\n\n```html\n<svg>\n  <use xlink:href=\"#id\" />\n</svg>\n```\n\nRaster images  will be inlined (using base64) and wrapped with an `<image>` tag.\nFiles like `image@2x.png` will be transformed with proper scale.\n\n### Custom sprite implementation\nIf you need custom behavior, use the `spriteModule` config option to specify the path of your sprite implementation module.\n\nYou can extend a default [`lib/web/sprite.js`](lib/web/sprite.js), or create your own.\nIn the latter case you only need to implement the `add` method that accepts the symbol data as a string.\n\n## Installation\n\n```bash\nnpm install svg-sprite-loader --save-dev\n```\n\n## Example config\n```js\nmodule.exports = {\n  module: {\n    loaders: [{\n      test: /\\.svg$/,\n      loader: 'svg-sprite?' + JSON.stringify({\n        name: '[name]_[hash]',\n        prefixize: true,\n        spriteModule: 'utils/my-custom-sprite'\n      })\n    }]\n  }\n};\n```\nor, using regular expressions to capture the SVG's filename:\n```js\nmodule.exports = {\n  module: {\n    loaders: [{\n      test: /\\.svg$/,\n      loader: 'svg-sprite?' + JSON.stringify({\n        name: 'icon-[1]',\n        prefixize: true,\n        regExp: './my-folder/(.*)\\\\.svg'\n      })\n    }]\n  }\n};\n// path-to-project/my-folder/name.svg > #icon-name\n```\n\n## Configuration\n\n* `name` configures a custom symbol ID name. Default is `[name]`. The following name patterns are supported:\n  * `[ext]` - the extension of the image\n  * `[name]` - the basename of the image\n  * `[path]` - the path of the image\n  * `[hash]` - the hash or the image content\n  * `[pathhash]` - the hash or the image path\n* `angularBaseWorkaround` adds a workaround for Angular.js 1.x issues with combining `<base>` and the history API (which is [typical for Angular.js](https://github.com/angular/angular.js/issues/8934)). Default is `false`.\n* `prefixize` isolates an image content by prefixing its `id`, `xlink:href` and `url(#id)` elements. Default is `true`.\n* `spriteModule` defines [custom sprite implementation](#custom-sprite-implementation) module path\n* `esModule` configures whether to transpile the module to an ES-compatible format. When this option is set to `true`, the loader will produce `module.exports.__esModule = true; module.exports['default'] = svg`. Default is `false`. (This is useful for transpilers other than Babel.)\n\n#### Using the loader with a `<base>` tag\nSVG Sprite Loader works well with [the `<base>` tag](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base) in normal cases, however, in situations where the `<base>` tag is used with the browser's `history` API to simulate location changing, this will often break SVG `xlink:href` inclusion.\n\nThere are a few ways to get around this:\n- If you use Angular.js 1.x, simply enable the `angularBaseWorkaround` config option described above\n- If you use Angular 2.x or newer, you can remove the `<base>` tag and [provide the router with an appropriate `APP_BASE_HREF` value](https://angular.io/docs/ts/latest/guide/router.html#!#html5-urls-and-the-lt-base-href-)\n- If you're using another framework, you have to: \n  - resolve the full image URL using `window.location` (so its usage may look like `<use xlink:href=\"https://yoursite.com/your/full/path#id\">`), \n  - trigger the `spriteLoaderLocationUpdated` event when a new location has been loaded. The `angularBaseWorkaround` option [is one example](https://github.com/kisenka/svg-sprite-loader/blob/master/lib/web/angular-base-workaround.js#L6) of this implementation.\n\n## Examples\n\nSingle image:\n```js\nvar id = require('svg-sprite!./image.svg');\n// => 'image'\n```\n\nSet of images:\n```js\nvar files = require.context('svg-sprite!images/logos', false, /(twitter|facebook|youtube)\\.svg$/);\nfiles.keys().forEach(files);\n```\n\nCustom sprite behavior:\n```js\n// my-sprite.js\nvar Sprite = require('node_modules/svg-sprite-loader/lib/web/sprite');\nmodule.exports = new Sprite();\n\n// my-app.jsx\nvar sprite = require('my-sprite');\n\nclass MyApplication extends React.Component {\n  componentWillMount() {\n    sprite.elem = sprite.render(document.body);\n  }\n\n  componentWillUnmount() {\n    sprite.elem.parentNode.removeChild(sprite.elem);\n  }\n}\n```\n\nUsing with React:\n```js\n// icon.jsx\nvar GLYPHS = {\n  PONY: require('img/pony.svg'),\n  UNICORN: require('img/unicorn.svg')\n};\n\nclass Icon extends React.Component {\n  render() {\n    var glyph = this.props.glyph;\n    return (\n      <svg className=\"icon\" dangerouslySetInnerHTML={{__html: '<use xlink:href=\"' + glyph + '\"></use>'}}/>\n    )\n  }\n}\n\nmodule.exports = Icon;\nmodule.exports.GLYPHS = GLYPHS;\n\n// some-component.jsx\nvar Icon = require('components/icon');\n<Icon glyph={Icon.GLYPHS.UNICORN}>\n```\n\nUsing with React 0.14+:\n```js\n// icon.jsx\nexport default function Icon({glyph, width = 16 , height = 16, className = 'icon'}){\n  return (\n    <svg className={className} width={width} height={height}>\n      <use xlinkHref={glyph} />\n    </svg>\n  );\n}\n\n// some-component.jsx\nimport Icon from './icon';\nimport help from './images/icons/Help.svg';\n\n<Icon glyph={help} />\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kisenka/webpack-svg-sprite-loader.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.3.1"
}
